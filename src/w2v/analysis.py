

def attention_analysis():
    inputs = [
        [
            "sports",
            "football_nfl",
            "Charles||Rogers||,||former||Michigan||State||football||,||Detroit||Lions||star||,||dead||at||38||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "news",
            "newsus",
            "Porsche||launches||into||second||story||of||New||Jersey||building||,||killing||2||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "sports",
            "more_sports",
            "Bode||Miller||delivered||his||twin||boys||after||midwife||did||n't||make||it||time||for||the||birth||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "news",
            "newspolitics",
            "Senior||Trump||official||embellished||résumé||,||had||face||on||fake||Time||cover||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "autos",
            "autosnews",
            "2020||Ford||Explorer||launch||hardly||went||according||to||plan||,||company||admits||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "news",
            "newscrime",
            "Mother||of||missing||Florida||girl||charged||;||human||remains||found||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "news",
            "newsus",
            "'s||not||over||'||:||Sarah||Palin||says||she||is||fighting||to||repair||her||marriage||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "finance",
            "markets",
            "Wealthy||investors||are||bracing||for||a||sharp||stock||sell-off||in||2020||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "entertainment",
            "entertainment-celebrity",
            "Chrissy||Teigen||'s||weekend||was||basically||a||double-header||,||plus||more||news||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ],
        [
            "finance",
            "finance-companies",
            "No||.||1||milk||company||declares||bankruptcy||amid||drop||in||demand||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]||[PAD]"
        ]
    ]
    cate_weights = [
        [0.0343, 0.0349, 0.0364, 0.0384, 0.0342, 0.0323, 0.0367, 0.0364, 0.0379,
         0.0341, 0.0341, 0.0364, 0.0335, 0.0385, 0.0321, 0.0313, 0.0313, 0.0313,
         0.0313, 0.0313, 0.0313, 0.0313, 0.0313, 0.0313, 0.0313, 0.0313, 0.0313,
         0.0313, 0.0313, 0.0313],
        [0.0025, 0.0037, 0.0019, 0.0025, 0.0013, 0.0009, 0.0009, 0.0014, 0.0042,
         0.0024, 0.0022, 0.0027, 0.0541, 0.0541, 0.0541, 0.0541, 0.0541, 0.0541,
         0.0541, 0.0541, 0.0541, 0.0541, 0.0541, 0.0541, 0.0541, 0.0541, 0.0541,
         0.0541, 0.0541, 0.0541],
        [0.0385, 0.0359, 0.0389, 0.0365, 0.0347, 0.0368, 0.0401, 0.0347, 0.0366,
         0.0344, 0.0333, 0.0345, 0.0376, 0.0376, 0.0374, 0.0345, 0.0299, 0.0299,
         0.0299, 0.0299, 0.0299, 0.0299, 0.0299, 0.0299, 0.0299, 0.0299, 0.0299,
         0.0299, 0.0299, 0.0299],
        [0.0311, 0.0251, 0.0157, 0.0209, 0.0105, 0.0133, 0.0288, 0.0168, 0.0105,
         0.0284, 0.0082, 0.0208, 0.0428, 0.0428, 0.0428, 0.0428, 0.0428, 0.0428,
         0.0428, 0.0428, 0.0428, 0.0428, 0.0428, 0.0428, 0.0428, 0.0428, 0.0428,
         0.0428, 0.0428, 0.0428],
        [0.0451, 0.0625, 0.0489, 0.0514, 0.0397, 0.0484, 0.0475, 0.0417, 0.0425,
         0.0308, 0.0518, 0.0557, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241,
         0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241, 0.0241,
         0.0241, 0.0241, 0.0241],
        [0.0075, 0.0039, 0.0110, 0.0074, 0.0142, 0.0083, 0.0069, 0.0103, 0.0085,
         0.0078, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457,
         0.0457, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457, 0.0457,
         0.0457, 0.0457, 0.0457],
        [0.0053, 0.0123, 0.0107, 0.0042, 0.0188, 0.0202, 0.0165, 0.0146, 0.0149,
         0.0043, 0.0240, 0.0082, 0.0624, 0.0120, 0.0200, 0.0501, 0.0501, 0.0501,
         0.0501, 0.0501, 0.0501, 0.0501, 0.0501, 0.0501, 0.0501, 0.0501, 0.0501,
         0.0501, 0.0501, 0.0501],
        [0.0572, 0.0689, 0.0550, 0.0530, 0.0819, 0.0441, 0.0483, 0.0605, 0.0784,
         0.0616, 0.0532, 0.0178, 0.0178, 0.0178, 0.0178, 0.0178, 0.0178, 0.0178,
         0.0178, 0.0178, 0.0178, 0.0178, 0.0178, 0.0178, 0.0178, 0.0178, 0.0178,
         0.0178, 0.0178, 0.0178],
        [0.0292, 0.0292, 0.0232, 0.0285, 0.0268, 0.0283, 0.0239, 0.0310, 0.0262,
         0.0282, 0.0256, 0.0263, 0.0374, 0.0374, 0.0374, 0.0374, 0.0374, 0.0374,
         0.0374, 0.0374, 0.0374, 0.0374, 0.0374, 0.0374, 0.0374, 0.0374, 0.0374,
         0.0374, 0.0374, 0.0374],
        [0.0583, 0.0387, 0.0687, 0.0529, 0.0616, 0.0584, 0.0685, 0.0751, 0.0465,
         0.0610, 0.0599, 0.0184, 0.0184, 0.0184, 0.0184, 0.0184, 0.0184, 0.0184,
         0.0184, 0.0184, 0.0184, 0.0184, 0.0184, 0.0184, 0.0184, 0.0184, 0.0184,
         0.0184, 0.0184, 0.0184]
    ]

    subcate_weights = [
        [4.7218e-02, 5.3303e-02, 4.2062e-02, 6.0201e-02, 5.3032e-02, 4.2694e-02,
         7.3435e-02, 4.2062e-02, 3.6264e-02, 3.4838e-02, 4.0392e-02, 4.2062e-02,
         6.4934e-02, 4.1252e-02, 2.3531e-02, 2.0181e-02, 2.0181e-02, 2.0181e-02,
         2.0181e-02, 2.0181e-02, 2.0181e-02, 2.0181e-02, 2.0181e-02, 2.0181e-02,
         2.0181e-02, 2.0181e-02, 2.0181e-02, 2.0181e-02, 2.0181e-02, 2.0181e-02],
        [1.0266e-02, 2.9506e-02, 3.7202e-02, 2.5122e-03, 2.7392e-02, 8.2165e-03,
         2.7614e-02, 1.1715e-01, 1.3370e-01, 6.6255e-02, 4.1589e-02, 1.0876e-02,
         2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02,
         2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02,
         2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02, 2.7096e-02],
        [8.3579e-02, 3.5964e-02, 2.6192e-02, 4.5917e-02, 3.4289e-02, 4.6050e-02,
         2.8737e-02, 4.3863e-02, 3.2609e-02, 3.0890e-02, 3.1130e-02, 3.3223e-02,
         3.2957e-02, 2.9487e-02, 2.7473e-02, 1.7977e-02, 2.9976e-02, 2.9976e-02,
         2.9976e-02, 2.9976e-02, 2.9976e-02, 2.9976e-02, 2.9976e-02, 2.9976e-02,
         2.9976e-02, 2.9976e-02, 2.9976e-02, 2.9976e-02, 2.9976e-02, 2.9976e-02],
        [6.5206e-03, 7.0908e-03, 1.4678e-03, 3.2578e-02, 6.2788e-02, 1.6239e-02,
         4.9904e-03, 3.0636e-03, 7.5138e-03, 1.3394e-02, 5.4497e-03, 4.5699e-03,
         4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02,
         4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02,
         4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02, 4.6352e-02],
        [3.5317e-03, 4.9133e-04, 4.0404e-03, 8.7725e-04, 2.7996e-03, 2.1633e-03,
         1.2005e-03, 4.0091e-04, 2.4704e-03, 2.7106e-03, 2.7065e-03, 1.7666e-03,
         5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02,
         5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02,
         5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02, 5.4158e-02],
        [4.3971e-02, 3.0509e-02, 1.6800e-01, 1.2935e-01, 1.5915e-01, 9.0758e-02,
         3.2344e-02, 5.3021e-02, 7.0914e-02, 2.9871e-02, 9.6051e-03, 9.6051e-03,
         9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03,
         9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03,
         9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03, 9.6051e-03],
        [5.8665e-04, 3.5988e-04, 1.4153e-03, 4.7343e-04, 8.3882e-04, 1.2461e-03,
         4.6517e-04, 7.3346e-04, 1.2016e-03, 7.8590e-04, 2.2057e-03, 1.2877e-04,
         3.1669e-03, 1.9389e-03, 5.8051e-04, 6.5592e-02, 6.5592e-02, 6.5592e-02,
         6.5592e-02, 6.5592e-02, 6.5592e-02, 6.5592e-02, 6.5592e-02, 6.5592e-02,
         6.5592e-02, 6.5592e-02, 6.5592e-02, 6.5592e-02, 6.5592e-02, 6.5592e-02],
        [6.7124e-03, 8.7545e-03, 2.3323e-03, 8.2679e-03, 1.9433e-03, 1.3339e-03,
         4.7430e-03, 5.2421e-03, 1.0444e-02, 1.2875e-03, 5.0336e-03, 4.9679e-02,
         4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02,
         4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02,
         4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02, 4.9679e-02],
        [2.7862e-02, 3.1708e-02, 1.1932e-02, 1.0725e-02, 1.1629e-02, 1.6138e-02,
         6.7547e-03, 2.6414e-02, 1.4407e-02, 1.6940e-02, 1.2832e-02, 1.2174e-02,
         4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02,
         4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02,
         4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02, 4.4471e-02],
        [3.7637e-02, 3.4130e-02, 2.9917e-02, 4.6818e-02, 4.8259e-02, 3.2699e-02,
         5.0047e-02, 4.8234e-02, 3.9565e-02, 2.3702e-02, 5.3192e-02, 2.9253e-02,
         2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02,
         2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02,
         2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02, 2.9253e-02]
    ]
    k = 8
    for i, input in enumerate(inputs):
        cate, subcate, text = input
        words = text.split("||")
        l = 0
        while l < len(words):
            if words[l] != "[PAD]":
                l += 1
            else:
                break
        cate_weight = cate_weights[i][: l]
        subcate_weight = subcate_weights[i][: l]
        cate_words, subcate_words = [], []
        print(" ".join(words[:l]))
        print(cate, subcate)
        for _ in range(k):
            cate_idx = cate_weight.index(max(cate_weight))
            cate_weight[cate_idx] = -1
            cate_words.append(words[cate_idx])

            subcate_idx = subcate_weight.index(max(subcate_weight))
            subcate_weight[subcate_idx] = -1
            subcate_words.append(words[subcate_idx])
        print(", ".join(cate_words))
        print(", ".join(subcate_words))


if __name__ == '__main__':
    attention_analysis()
